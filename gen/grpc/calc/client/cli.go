// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc gRPC client CLI support package
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"encoding/json"
	"fmt"
)

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddMessage string) (*calc.AddPayload, error) {
	var err error
	var message calcpb.AddRequest
	{
		if calcAddMessage != "" {
			err = json.Unmarshal([]byte(calcAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 3237209857320107068,\n      \"b\": 1228682945796019344\n   }'")
			}
		}
	}
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}

// BuildMinusPayload builds the payload for the calc minus endpoint from CLI
// flags.
func BuildMinusPayload(calcMinusMessage string) (*calc.MinusPayload, error) {
	var err error
	var message calcpb.MinusRequest
	{
		if calcMinusMessage != "" {
			err = json.Unmarshal([]byte(calcMinusMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 8723986392256123438,\n      \"b\": 9092197569596372935\n   }'")
			}
		}
	}
	v := &calc.MinusPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}

// BuildMultiplicationPayload builds the payload for the calc multiplication
// endpoint from CLI flags.
func BuildMultiplicationPayload(calcMultiplicationMessage string) (*calc.MultiplicationPayload, error) {
	var err error
	var message calcpb.MultiplicationRequest
	{
		if calcMultiplicationMessage != "" {
			err = json.Unmarshal([]byte(calcMultiplicationMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 6001261670528037577,\n      \"b\": 5850431520333673251\n   }'")
			}
		}
	}
	v := &calc.MultiplicationPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}
